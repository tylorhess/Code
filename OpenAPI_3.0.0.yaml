# swagger.io
# irc.freenode.net (#swagger)
# swagger.io/irc/  (#swagger)

openapi: 3.0.0
info:
  title: Amigo API
  version: "1.0.0"
  description: Amigo API is the contract between frontend and backend services.
  termsOfService: 'http://amigo.app/terms'
  contact:
    name: Tylor Hess
    email: tylor@amigo.app
    url: 'http://tylor.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  externalDocs:
    description: Find out more about our app
    url: 'http://app.com'

servers:
  - description: Amigo API (Auto-mocked via Swagger) # Added by API Auto Mocking Plugin
    url: https://virtserver.swaggerhub.com/amigo-travel/AmigoAPI/1.0.0

tags: # a group of paths (one path can have multiple tags)
  - name: users
    description: Operations about user
    externalDocs:
      description: Find out more about our app
      url: 'http://app.com'
  - ... 

paths: 
  # /users/{id} + schema: type: array --> /users/74,21,312 --> id = [74,21,312]
  '/users/{id}/messages/{msg_id}':
  /users/{id}/messages/{msg_id}: 

paths:
  '/path{id}':
    parameters:
      - name: id
        in: path|query|header|cookie # path: /users/{id}, query: /users?id=1, custom headers (NOT: Content-Type, Accepted, nor Authorization)
        description: 
        required: true # `in: path` must have `required: true` (leave blank if false, false by default)
        depreciated: true # leave blank if false (false by default)
        schema:
          default: value # 
        # OR for: /users?filter={"color":"blue","size":"large"}
        content:
          application/json: 
            schema: 
        
        # https://swagger.io/docs/specification/serialization/
        style: (simple)|label|matrix 
        explode: (false)|true

        # /users?activate
        name: activate
        allowEmptyValue: true
        # same as:
        schema:
          nullable: true
paths:
  '/path':
    get|post|put|patch|delete:
      tags: [users, ... ]
      tags: 
        - users
        - ... 
      summary: short description here
      description: long description here
      operationId: functionName
      parameters: # see above
      requestBody:
        $ref: '#/components/requestBodies/Users'
        # OR
        description: optional description in markdown
        required: true
        content: 
          application/vnd.api+json|application/json|application/xml|application/x-www-form-urlencoded|text/plain:
            schema:
              $ref: '#/components/schemas/Users'
              # OR
              type: string|number|integer|boolean|array|object
      responses:
        '###':
          description: 
          content: 
            application/json|application/xml|application/x-www-form-urlencoded|text/plain:
            schema:
              $ref: '#/components/schemas/Users'
              # OR
              type: string|number|integer|boolean|array|object
paths:
  '/path':
    get|post|put|patch|delete:
      responses:
        '200': # OK (with Content) [GET]
          description: OK | successful operation | Eyerything is working
        '201': # OK (Created) [POST]
          description: New resource has been created
        '204': # OK (No Content) [DELETE] 
          description: User was deleted | The resource was successfully deleted
          # NO `content:`
        #'304': # Not Modified – The client can use cached data        
        '400': # Bad Request (GET, DELETE) – The request was invalid or cannot be served. The exact error should be explained in the error payload. E.g. „The JSON is not valid“
          description: Invalid <parameter> value/supplied
          description: Bad request. User ID must be an integer and larger than 0.
        '401': # Unauthorized – The request requires an user authentication
          description: Authorization information is missing or invalid.
        #'403': # Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        '404': # Not found – There is no resource behind the URI.
          description: <path> not found
          description: A user with the specified ID was not found.
        '405': # (POST)
          description: Validation exception | Invalid input
        #'422': # Unprocessable Entity – Should be used if the server cannot process the enitity, e.g. if an image cannot be formatted or mandatory fields are missing in the payload.
        #'500': # Internal Server Error – API developers should avoid this error. If an error occurs in the global catch blog, the stracktrace should be logged and not returned as response.
        '5XX':
          description: Unexpected error.
          
        

components:
  schemas:
    'Object1':
    Object1: # Object1 schema via $ref: '#/components/schemas/Object1'
      type: string|number|integer|boolean|array|object
        nullable: true # false by default
        readOnly: true # returned by GET, not used in POST/PUT/PATCH (leave blank if false, false by default)
        writeOnly: true # used in POST/PUT/PATCH, not returned by GET (leave blank if false, false by default)
      type: string
        minLength|maxLength: 50
        format: date|date-time|password|byte|binary # email, uuid, uri, hostname, ipv4, ipv6, or anything else
        pattern: '^\d{3}-\d{2}-\d{4}$' # regular expression
      type: string # constant
      enum: [constant]
      type: string # file
        format: binary # binary file contents, OR
        format: byte   # base64-encoded file contents
      type: number|integer
        format: float|double # number
        format: int32|int64  # integer
        minimum|maximum: 10 # inclusive by default
        exclusiveMinimim|exclusiveMaximim: true # leave blank if false (inclusive by default)
        multipleOf: 5
      type: boolean # true|false (NOT truthy or falsy)
      type: array
        items: {} # array with items of any type)
        items: 
          type: string|number|integer|boolean|array|object
          $ref: '#/components/schemas/Object1'
        minItems|maxItems: 1
        uniqueItems: true # all items must be unique (leave blank if false, false by default)
      type: object
        required: # required properties (leave blank if optional, optional by default)
          - prop1
          - prop2
          - ... 
        additionalProperties: true|{} # instead of `properties` --> object with properties of any type
        properties:
          prop1: # name of any of object's properties
            type: string|number|integer|boolean|array|object
          id: 
            type: integer
            readOnly: true # returned by GET, not used in POST/PUT/PATCH (leave blank if false, false by default)
          password:
            type: string
            writeOnly: true # used in POST/PUT/PATCH, not returned by GET (leave blank if false, false by default)
      oneOf|anyOf: [string,number,integer,boolean,array,object]
      enum: [asc, desc]
      enum:
        - asc
        - desc

components:
  requestBodies:
    'Users': # Users requestBody via $ref: '#/components/requestBodies/Users'
      description: optional description in markdown
      required: true
      content: 
        application/json|application/xml|application/x-www-form-urlencoded|text/plain:
          schema:
            $ref: '#/components/schemas/Users'

components:
  securitySchemes:
    'app_auth':
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    'api_key':
      type: apiKey
      name: api_key
      in: header
paths:
  '/path':
    get|post|put|patch|delete:
      security:
        - app_auth:
            - 'write:users'
            - 'read:users'
      security:
        - api_key: []


